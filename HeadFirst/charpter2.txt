观察者模式：定义了对象之间的一对多依赖，这样一来，当一个对象改变状态时，它的所有依赖者都会收到通知并自动更新。
            当两个对象之间松耦合，它们依然可以交互，但是不太清楚彼此的细节。观察者模式提供了一种对象设计，让主题和观察者之间松耦合.松耦合的设计之所以能让我们建立有弹性的OO系统，能够应对变化，是因为对象之间的互相依赖降到了最低。

设计原则4：为了交互对象之间的松耦合设计而努力。


要点：1，观察者模式定义了对象之间一对多的关系。
      2，主题（可观察者）用一个共同的接口来更新观察者。
      3，观察者和可观察者之间用松耦合方式结合，可观察者不知道观察者的细节，只知道观察者实现了观察者接口。
      4，使用此模式时，你可从被观察者处推（push）或拉（pull）数据。
      5，有多个观察者时，不可以依赖特定的通知次序。
      6，java有多种观察者模式的实现，如java.util.Observable,JavaBean,RMI。
      7, 要注意java.util.Observable实现上带来的一些问题。
      8，如果有必要的话，可以实现自己的Observable,这并不太难。
      9，Swing大量使用观察者模式，许多GUI框架也是如此。

